// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Acceptance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Calculate BMI", Description=" As a user\r\n I can ask the bmi of a person\r\n In order to assess the person’s medi" +
        "cal condition", SourceFile="CalculateBMISpecs.feature", SourceLine=0)]
    public partial class CalculateBMIFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CalculateBMISpecs.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculate BMI", " As a user\r\n I can ask the bmi of a person\r\n In order to assess the person’s medi" +
                    "cal condition", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TheBmiIsCalculatedBasedOnTheLengthAndTheWeightOfAPerson(string length, string weight, string bmi, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The bmi is calculated based on the length and the weight of a person", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("an existing person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.And(string.Format("a last measurement with length {0} and weight {1}", length, weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
    testRunner.When("I choose to calculate the bmi of this person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
    testRunner.Then(string.Format("the bmi is {0}", bmi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is calculated based on the length and the weight of a person, 160", SourceLine=13)]
        public virtual void TheBmiIsCalculatedBasedOnTheLengthAndTheWeightOfAPerson_160()
        {
            this.TheBmiIsCalculatedBasedOnTheLengthAndTheWeightOfAPerson("160", "65000", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is calculated based on the length and the weight of a person, 180", SourceLine=14)]
        public virtual void TheBmiIsCalculatedBasedOnTheLengthAndTheWeightOfAPerson_180()
        {
            this.TheBmiIsCalculatedBasedOnTheLengthAndTheWeightOfAPerson("180", "75000", "23.15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is calculated based on the most recent anamnesis of the person", SourceLine=16)]
        public virtual void TheBmiIsCalculatedBasedOnTheMostRecentAnamnesisOfThePerson()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The bmi is calculated based on the most recent anamnesis of the person", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("an existing person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.And("a measurement on 12-12-2012 with length 180 and weight 65000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("a measurement on 12-12-2013 with length 180 and weight 75000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("I choose to calculate the bmi of this person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the bmi is 23.15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TheBmiIsRoundedTo2Digits(string length, string weight, string bmi, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The bmi is rounded to 2 digits", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("an existing person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.And(string.Format("a last measurement with length {0} and weight {1}", length, weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I choose to calculate the bmi of this person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then(string.Format("the bmi is {0}", bmi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is rounded to 2 digits, Variant 0", SourceLine=30)]
        public virtual void TheBmiIsRoundedTo2Digits_Variant0()
        {
            this.TheBmiIsRoundedTo2Digits("160", "65000", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is rounded to 2 digits, Variant 1", SourceLine=31)]
        public virtual void TheBmiIsRoundedTo2Digits_Variant1()
        {
            this.TheBmiIsRoundedTo2Digits("160", "65001", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is rounded to 2 digits, Variant 2", SourceLine=32)]
        public virtual void TheBmiIsRoundedTo2Digits_Variant2()
        {
            this.TheBmiIsRoundedTo2Digits("160", "65009", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is rounded to 2 digits, Variant 3", SourceLine=33)]
        public virtual void TheBmiIsRoundedTo2Digits_Variant3()
        {
            this.TheBmiIsRoundedTo2Digits("180", "75000", "23.15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The bmi is rounded to 2 digits, Variant 4", SourceLine=34)]
        public virtual void TheBmiIsRoundedTo2Digits_Variant4()
        {
            this.TheBmiIsRoundedTo2Digits("180", "75009", "23.15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
