// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specflow_Unit
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Measurement", SourceFile="MeasurementSpecs.feature", SourceLine=0)]
    public partial class MeasurementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MeasurementSpecs.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Measurement", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ANewMeasurementObjectCanBeCreated(string circumstance, string length, string weight, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement object can be created", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given(string.Format("a length {0} is provided", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And(string.Format("a weight  {0} is provided", weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.And("a valid date is enterd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When(string.Format("i try to create a new measurement object with {0}", circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("the measurement object is created with the enterd data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, normal length", SourceLine=10)]
        public virtual void ANewMeasurementObjectCanBeCreated_NormalLength()
        {
            this.ANewMeasurementObjectCanBeCreated("normal length", "180", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, just big enough length", SourceLine=11)]
        public virtual void ANewMeasurementObjectCanBeCreated_JustBigEnoughLength()
        {
            this.ANewMeasurementObjectCanBeCreated("just big enough length", "25", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, just small enough length", SourceLine=12)]
        public virtual void ANewMeasurementObjectCanBeCreated_JustSmallEnoughLength()
        {
            this.ANewMeasurementObjectCanBeCreated("just small enough length", "275", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, normal weight", SourceLine=13)]
        public virtual void ANewMeasurementObjectCanBeCreated_NormalWeight()
        {
            this.ANewMeasurementObjectCanBeCreated("normal weight", "180", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, just big enough weight", SourceLine=14)]
        public virtual void ANewMeasurementObjectCanBeCreated_JustBigEnoughWeight()
        {
            this.ANewMeasurementObjectCanBeCreated("just big enough weight", "180", "300", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement object can be created, just small enough weight", SourceLine=15)]
        public virtual void ANewMeasurementObjectCanBeCreated_JustSmallEnoughWeight()
        {
            this.ANewMeasurementObjectCanBeCreated("just small enough weight", "180", "600000", ((string[])(null)));
        }
        
        public virtual void WhenCreatingAMeasurementObjectTheLengthHasToBeValid(string input_Problem, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When creating a measurement object, the length has to be valid", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given(string.Format("an invalid length {0} is provided, which is invalid because {1}", value, input_Problem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("all other parameters are valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("i try to create a new measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the measurement object should throw an argument exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the length has to be valid, lot to small leng" +
            "th", SourceLine=24)]
        public virtual void WhenCreatingAMeasurementObjectTheLengthHasToBeValid_LotToSmallLength()
        {
            this.WhenCreatingAMeasurementObjectTheLengthHasToBeValid("lot to small length", "15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the length has to be valid, bit to small leng" +
            "th", SourceLine=25)]
        public virtual void WhenCreatingAMeasurementObjectTheLengthHasToBeValid_BitToSmallLength()
        {
            this.WhenCreatingAMeasurementObjectTheLengthHasToBeValid("bit to small length", "24", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the length has to be valid, bit to big length" +
            "", SourceLine=26)]
        public virtual void WhenCreatingAMeasurementObjectTheLengthHasToBeValid_BitToBigLength()
        {
            this.WhenCreatingAMeasurementObjectTheLengthHasToBeValid("bit to big length", "276", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the length has to be valid, lot to big length" +
            "", SourceLine=27)]
        public virtual void WhenCreatingAMeasurementObjectTheLengthHasToBeValid_LotToBigLength()
        {
            this.WhenCreatingAMeasurementObjectTheLengthHasToBeValid("lot to big length", "300", ((string[])(null)));
        }
        
        public virtual void WhenCreatingAMeasurementObjectTheWeightHasToBeValid(string input_Problem, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When creating a measurement object, the weight has to be valid", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("an invalid weight {0} is provided, which is invalid because {1}", value, input_Problem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("all other parameters are valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("i try to create a new measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the measurement object should throw an argument exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the weight has to be valid, lot to small weig" +
            "ht", SourceLine=36)]
        public virtual void WhenCreatingAMeasurementObjectTheWeightHasToBeValid_LotToSmallWeight()
        {
            this.WhenCreatingAMeasurementObjectTheWeightHasToBeValid("lot to small weight", "100", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the weight has to be valid, bit to small weig" +
            "ht", SourceLine=37)]
        public virtual void WhenCreatingAMeasurementObjectTheWeightHasToBeValid_BitToSmallWeight()
        {
            this.WhenCreatingAMeasurementObjectTheWeightHasToBeValid("bit to small weight", "299", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the weight has to be valid, bit to big weight" +
            "", SourceLine=38)]
        public virtual void WhenCreatingAMeasurementObjectTheWeightHasToBeValid_BitToBigWeight()
        {
            this.WhenCreatingAMeasurementObjectTheWeightHasToBeValid("bit to big weight", "600001", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a measurement object, the weight has to be valid, lot to big weight" +
            "", SourceLine=39)]
        public virtual void WhenCreatingAMeasurementObjectTheWeightHasToBeValid_LotToBigWeight()
        {
            this.WhenCreatingAMeasurementObjectTheWeightHasToBeValid("lot to big weight", "660000", ((string[])(null)));
        }
        
        public virtual void AMeasurementsLengthCanBeModified(string circumstance, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurements length can be modified", exampleTags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When(string.Format("i try to change the length to {0}, which is {1}", value, circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("the measurement object should be updated with the new length value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements length can be modified, OTHER_normal length", SourceLine=47)]
        public virtual void AMeasurementsLengthCanBeModified_OTHER_NormalLength()
        {
            this.AMeasurementsLengthCanBeModified("OTHER_normal length", "190", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements length can be modified, just big enough length", SourceLine=48)]
        public virtual void AMeasurementsLengthCanBeModified_JustBigEnoughLength()
        {
            this.AMeasurementsLengthCanBeModified("just big enough length", "25", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements length can be modified, just small enough length", SourceLine=49)]
        public virtual void AMeasurementsLengthCanBeModified_JustSmallEnoughLength()
        {
            this.AMeasurementsLengthCanBeModified("just small enough length", "275", ((string[])(null)));
        }
        
        public virtual void AMeasurementsWeightCanBeModified(string circumstance, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurements weight can be modified", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When(string.Format("i try to change the weight to {0}, which is {1}", value, circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the measurement object should be updated with the new weight value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements weight can be modified, OTHER_normal weight", SourceLine=57)]
        public virtual void AMeasurementsWeightCanBeModified_OTHER_NormalWeight()
        {
            this.AMeasurementsWeightCanBeModified("OTHER_normal weight", "80000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements weight can be modified, just big enough weight", SourceLine=58)]
        public virtual void AMeasurementsWeightCanBeModified_JustBigEnoughWeight()
        {
            this.AMeasurementsWeightCanBeModified("just big enough weight", "300", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurements weight can be modified, just small enough weight", SourceLine=59)]
        public virtual void AMeasurementsWeightCanBeModified_JustSmallEnoughWeight()
        {
            this.AMeasurementsWeightCanBeModified("just small enough weight", "600000", ((string[])(null)));
        }
        
        public virtual void WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid(string circumstance, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When modifying the length of a measurement, the length should be valid", exampleTags);
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When(string.Format("i try to change the length to {0}, which is {1}", value, circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("the measurement object should throw an argument exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the length of a measurement, the length should be valid, lot to sm" +
            "all length", SourceLine=67)]
        public virtual void WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid_LotToSmallLength()
        {
            this.WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid("lot to small length", "15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the length of a measurement, the length should be valid, bit to sm" +
            "all length", SourceLine=68)]
        public virtual void WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid_BitToSmallLength()
        {
            this.WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid("bit to small length", "24", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the length of a measurement, the length should be valid, bit to bi" +
            "g length", SourceLine=69)]
        public virtual void WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid_BitToBigLength()
        {
            this.WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid("bit to big length", "276", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the length of a measurement, the length should be valid, lot to bi" +
            "g length", SourceLine=70)]
        public virtual void WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid_LotToBigLength()
        {
            this.WhenModifyingTheLengthOfAMeasurementTheLengthShouldBeValid("lot to big length", "300", ((string[])(null)));
        }
        
        public virtual void WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid(string input_Problem, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When modifying the weight of a measurement, the weight should be valid", exampleTags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.When(string.Format("i try to change the weight to {0}, which is <Circumstance>", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the measurement object should throw an argument exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the weight of a measurement, the weight should be valid, lot to sm" +
            "all weight", SourceLine=78)]
        public virtual void WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid_LotToSmallWeight()
        {
            this.WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid("lot to small weight", "100", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the weight of a measurement, the weight should be valid, bit to sm" +
            "all weight", SourceLine=79)]
        public virtual void WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid_BitToSmallWeight()
        {
            this.WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid("bit to small weight", "299", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the weight of a measurement, the weight should be valid, bit to bi" +
            "g weight", SourceLine=80)]
        public virtual void WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid_BitToBigWeight()
        {
            this.WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid("bit to big weight", "600001", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When modifying the weight of a measurement, the weight should be valid, lot to bi" +
            "g weight", SourceLine=81)]
        public virtual void WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid_LotToBigWeight()
        {
            this.WhenModifyingTheWeightOfAMeasurementTheWeightShouldBeValid("lot to big weight", "660000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be modified with a new date", SourceLine=83)]
        public virtual void AMeasurementCanBeModifiedWithANewDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurement can be modified with a new date", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
 testRunner.When("the date is changed with a valid value: 5-10-2013", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("the measurement object should be updated with the new date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be compared to a measurement which is null", SourceLine=88)]
        public virtual void AMeasurementCanBeComparedToAMeasurementWhichIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurement can be compared to a measurement which is null", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.And("another measurement object is created which is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.When("the measurement object is compared to the other measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the result should be positive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AMeasurementCanBeComparedToAnotherMeasurement(string circumstance, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurement can be compared to another measurement", exampleTags);
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("a valid measurement object with date 1-1-2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And(string.Format("another measurement object is created with the date {0} which is {1}", value, circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("the measurement object is compared to the other measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be compared to another measurement, an earlier date", SourceLine=101)]
        public virtual void AMeasurementCanBeComparedToAnotherMeasurement_AnEarlierDate()
        {
            this.AMeasurementCanBeComparedToAnotherMeasurement("an earlier date", "1-1-2000", "positive", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be compared to another measurement, a later date", SourceLine=102)]
        public virtual void AMeasurementCanBeComparedToAnotherMeasurement_ALaterDate()
        {
            this.AMeasurementCanBeComparedToAnotherMeasurement("a later date", "1-2-2001", "negative", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be compared to another measurement, the same date", SourceLine=103)]
        public virtual void AMeasurementCanBeComparedToAnotherMeasurement_TheSameDate()
        {
            this.AMeasurementCanBeComparedToAnotherMeasurement("the same date", "1-1-2001", "zero", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be checked for equality to a measurement which is null", SourceLine=105)]
        public virtual void AMeasurementCanBeCheckedForEqualityToAMeasurementWhichIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurement can be checked for equality to a measurement which is null", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("a valid measurement object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
 testRunner.And("another measurement object is created which is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.When("i try to check for equality between both measurements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("the result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AMeasurementCanBeCheckedForEqualityToAnotherMeasurement(string circumstance, string value, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A measurement can be checked for equality to another measurement", exampleTags);
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("a valid measurement object with date 1-1-2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.And(string.Format("another measurement object is created with the date {0} which is {1}", value, circumstance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.When("i try to check for equality between both measurements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be checked for equality to another measurement, an earlier date" +
            "", SourceLine=118)]
        public virtual void AMeasurementCanBeCheckedForEqualityToAnotherMeasurement_AnEarlierDate()
        {
            this.AMeasurementCanBeCheckedForEqualityToAnotherMeasurement("an earlier date", "1-1-2000", "false", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be checked for equality to another measurement, a later date", SourceLine=119)]
        public virtual void AMeasurementCanBeCheckedForEqualityToAnotherMeasurement_ALaterDate()
        {
            this.AMeasurementCanBeCheckedForEqualityToAnotherMeasurement("a later date", "1-2-2001", "false", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A measurement can be checked for equality to another measurement, the same date", SourceLine=120)]
        public virtual void AMeasurementCanBeCheckedForEqualityToAnotherMeasurement_TheSameDate()
        {
            this.AMeasurementCanBeCheckedForEqualityToAnotherMeasurement("the same date", "1-1-2001", "true", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
