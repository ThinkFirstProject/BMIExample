// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specflow_Acceptance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Maintaining the personal data of a user", Description="As a user \r\nI want to manage the personal data of a user\r\nSo i can manage the use" +
        "r who\'s BMI are tracked", SourceFile="MaintainPersonDataSpecs.feature", SourceLine=0)]
    public partial class MaintainingThePersonalDataOfAUserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MaintainPersonDataSpecs.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Maintaining the personal data of a user", "As a user \r\nI want to manage the personal data of a user\r\nSo i can manage the use" +
                    "r who\'s BMI are tracked", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new user can be created", SourceLine=5)]
        public virtual void ANewUserCanBeCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new user can be created", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("valid personal data is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("a valid starting measurement is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("i try to generate a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the new user is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void WhenCreatingANewUserTheDataHasToBeValid(string error, string socialSecurityNumber, string gender, string birthdate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When creating a new user, the data has to be valid", exampleTags);
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Social security number",
                        "Gender",
                        "Birthdate"});
            table1.AddRow(new string[] {
                        string.Format("{0}", socialSecurityNumber),
                        string.Format("{0}", gender),
                        string.Format("{0}", birthdate)});
#line 13
 testRunner.Given("personal data is provided which is invalid", ((string)(null)), table1, "Given ");
#line 16
 testRunner.And("a valid starting measurement is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("i try to generate a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("an error is returned containing the message {0}", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a new user, the data has to be valid, Invalid social security numbe" +
            "r", SourceLine=20)]
        public virtual void WhenCreatingANewUserTheDataHasToBeValid_InvalidSocialSecurityNumber()
        {
            this.WhenCreatingANewUserTheDataHasToBeValid("Invalid social security number", "null", "Male", "01-01-2001", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When creating a new user, the first measurement has to be valid", SourceLine=22)]
        public virtual void WhenCreatingANewUserTheFirstMeasurementHasToBeValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When creating a new user, the first measurement has to be valid", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("valid personal data is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("an invalid first measurement is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.When("i try to generate a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("an error is returned containing the message Invalid first measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The personal info of a user can be changed", SourceLine=28)]
        public virtual void ThePersonalInfoOfAUserCanBeChanged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The personal info of a user can be changed", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("a valid user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("new valid personal data is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("i try to change the personal data of the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the personal data of the user is changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void WhenChangingThePersonalDataOfAUserTheEnterdDataHasToBeValid(string error, string socialSecurityNumber, string gender, string birthdate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When changing the personal data of a user, the enterd data has to be valid", exampleTags);
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("a valid user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Social security number",
                        "Gender",
                        "Birthdate"});
            table2.AddRow(new string[] {
                        string.Format("{0}", socialSecurityNumber),
                        string.Format("{0}", gender),
                        string.Format("{0}", birthdate)});
#line 37
 testRunner.And("new invalid personal data is provided", ((string)(null)), table2, "And ");
#line 40
 testRunner.When("i try to change the personal data of the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then(string.Format("an error is returned containing the message {0}", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When changing the personal data of a user, the enterd data has to be valid, Inval" +
            "id social security number", SourceLine=43)]
        public virtual void WhenChangingThePersonalDataOfAUserTheEnterdDataHasToBeValid_InvalidSocialSecurityNumber()
        {
            this.WhenChangingThePersonalDataOfAUserTheEnterdDataHasToBeValid("Invalid social security number", "null", "Male", "01-01-2001", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
