// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Unit_Mock
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Specifications for the controller", SourceFile="BMIControllerSpecs.feature", SourceLine=0)]
    public partial class SpecificationsForTheControllerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BMIControllerSpecs.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specifications for the controller", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The viewresult with an overview of all people can be fetched", SourceLine=2)]
        public virtual void TheViewresultWithAnOverviewOfAllPeopleCanBeFetched()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The viewresult with an overview of all people can be fetched", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("i try to fetch the viewresult for the overview of registerd people", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then("the viewresult for the for the overview of registerd people is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The viewresult for adding a measurement can be fetched", SourceLine=7)]
        public virtual void TheViewresultForAddingAMeasurementCanBeFetched()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The viewresult for adding a measurement can be fetched", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("a valid datamodel is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("i try to fetch the viewresult for adding a measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the viewresult for adding a measurement is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When fetching the viewresult for adding a new measurement, the provided datamodel" +
            " can\'t be null", SourceLine=13)]
        public virtual void WhenFetchingTheViewresultForAddingANewMeasurementTheProvidedDatamodelCanTBeNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When fetching the viewresult for adding a new measurement, the provided datamodel" +
                    " can\'t be null", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("a datamodel which is null is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("i try to fetch the viewresult for adding a measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("The viewresult for adding a new person can be fetched", SourceLine=19)]
        public virtual void TheViewresultForAddingANewPersonCanBeFetched()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The viewresult for adding a new person can be fetched", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("i try to fetch the viewresult for adding a person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the viewresult for adding a person is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid(string socialSecurityNumber, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When trying to fetch the viewresult for the details of a person, the social secur" +
                    "ity number has to exist. And has to be valid", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And(string.Format("the provide social security number is {0}, which is {1}", socialSecurityNumber, error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("i try to fetch the viewresult for viewing the details of a person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When trying to fetch the viewresult for the details of a person, the social secur" +
            "ity number has to exist. And has to be valid, 5", SourceLine=31)]
        public virtual void WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid_5()
        {
            this.WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid("5", "non existent", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When trying to fetch the viewresult for the details of a person, the social secur" +
            "ity number has to exist. And has to be valid, ", SourceLine=32)]
        public virtual void WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid_()
        {
            this.WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid("", "empty", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When trying to fetch the viewresult for the details of a person, the social secur" +
            "ity number has to exist. And has to be valid, null", SourceLine=33)]
        public virtual void WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid_Null()
        {
            this.WhenTryingToFetchTheViewresultForTheDetailsOfAPersonTheSocialSecurityNumberHasToExist_AndHasToBeValid("null", "null value", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new person can be added", SourceLine=35)]
        public virtual void ANewPersonCanBeAdded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new person can be added", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("a datamodel with valid data for a person is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("i try to add the new person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the viewresult contains a message indicating the person is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When adding a new person, the provided datamodel has to be valid", SourceLine=41)]
        public virtual void WhenAddingANewPersonTheProvidedDatamodelHasToBeValid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When adding a new person, the provided datamodel has to be valid", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("a datamodel with invalid data for a person is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When("i try to add the new person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("the viewresult contains an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("When adding a new person, the provided datamodel can\'t be null", SourceLine=47)]
        public virtual void WhenAddingANewPersonTheProvidedDatamodelCanTBeNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When adding a new person, the provided datamodel can\'t be null", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("a BMIController", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("a datamodel which is null is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("i try to add the new person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the viewresult contains a data error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
