// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Unit
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Specifications for a measurement", SourceFile="MeasurementSpecs.feature", SourceLine=0)]
    public partial class SpecificationsForAMeasurementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MeasurementSpecs.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specifications for a measurement", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate(string length, string weight, string date, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement can be created with a length, a weight and a date", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
    testRunner.When(string.Format("I want to make a new measurement with length {0}, weight {1} and date {2}", length, weight, date), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 5
    testRunner.Then("A new measurement is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 6
 testRunner.And(string.Format("the length is {0}", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
    testRunner.And(string.Format("the weight is {0}", weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
    testRunner.And(string.Format("the date is {0}", date), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 0", SourceLine=10)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant0()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("180", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 1", SourceLine=11)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant1()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("160", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 2", SourceLine=12)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant2()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("50", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 3", SourceLine=13)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant3()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("300", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 4", SourceLine=14)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant4()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("180", "65000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 5", SourceLine=15)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant5()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("180", "20000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 6", SourceLine=16)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant6()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("180", "700000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight and a date, Variant 7", SourceLine=17)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate_Variant7()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeightAndADate("180", "75000", "10-10-2012", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate(string length, string weight, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement can be created with a length, a weight. Date is autogenerated a" +
                    "nd set to the current system date", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.When(string.Format("I want to make a new measurement with length {0}, weight {1} and the current date" +
                        "", length, weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
    testRunner.Then("A new measurement is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
    testRunner.And(string.Format("the length is {0}", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.And(string.Format("the weight is {0}", weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
    testRunner.And("the date is the current date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 0", SourceLine=27)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant0()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("180", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 1", SourceLine=28)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant1()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("160", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 2", SourceLine=29)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant2()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("50", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 3", SourceLine=30)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant3()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("300", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 4", SourceLine=31)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant4()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("180", "65000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 5", SourceLine=32)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant5()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("180", "20000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement can be created with a length, a weight. Date is autogenerated a" +
            "nd set to the current system date, Variant 6", SourceLine=33)]
        public virtual void ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate_Variant6()
        {
            this.ANewMeasurementCanBeCreatedWithALengthAWeight_DateIsAutogeneratedAndSetToTheCurrentSystemDate("180", "700000", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters(string invalidLength, string validWeight, string validDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement cannot be created with an invalid length, even if the other dat" +
                    "a is valid (constructor with 3 parameters)", exampleTags);
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.When(string.Format("I want to make a new measurement with invalid length {0}, valid weight {1} and va" +
                        "lid date {2}", invalidLength, validWeight, validDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 3 parameters), -180", SourceLine=40)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters_180()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters("-180", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 3 parameters), 49", SourceLine=41)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters_49()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters("49", "75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 3 parameters), 301", SourceLine=42)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters_301()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith3Parameters("301", "75000", "12-12-2012", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters(string invalidLength, string validWeight, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement cannot be created with an invalid length, even if the other dat" +
                    "a is valid (constructor with 2 parameters)", exampleTags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.When(string.Format("I want to make a new measurement with invalid length {0}, valid weight {1} and th" +
                        "e current date", invalidLength, validWeight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 2 parameters), -180", SourceLine=49)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters_180()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters("-180", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 2 parameters), 49", SourceLine=50)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters_49()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters("49", "75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid length, even if the other dat" +
            "a is valid (constructor with 2 parameters), 301", SourceLine=51)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters_301()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidConstructorWith2Parameters("301", "75000", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters(string validLength, string invalidWeight, string validDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement cannot be created with a invalid weight, even if the other data" +
                    " is valid (constructor with 3 parameters)", exampleTags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.When(string.Format("I want to make a new measurement with valid length {0},  invalid weight {1} and v" +
                        "alid date {2}", validLength, invalidWeight, validDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with a invalid weight, even if the other data" +
            " is valid (constructor with 3 parameters), Variant 0", SourceLine=58)]
        public virtual void ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters_Variant0()
        {
            this.ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters("180", "-75000", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with a invalid weight, even if the other data" +
            " is valid (constructor with 3 parameters), Variant 1", SourceLine=59)]
        public virtual void ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters_Variant1()
        {
            this.ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters("180", "1999", "12-12-2012", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with a invalid weight, even if the other data" +
            " is valid (constructor with 3 parameters), Variant 2", SourceLine=60)]
        public virtual void ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters_Variant2()
        {
            this.ANewMeasurementCannotBeCreatedWithAInvalidWeightEvenIfTheOtherDataIsValidConstructorWith3Parameters("180", "700001", "12-12-2012", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters(string validLength, string invalidWeight, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement cannot be created with an invalid weight, even if the other dat" +
                    "a are valid (constructor with 2 parameters)", exampleTags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.When(string.Format("I want to make a new measurement with valid length {0}, invalid weight {1} and th" +
                        "e current date", validLength, invalidWeight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid weight, even if the other dat" +
            "a are valid (constructor with 2 parameters), Variant 0", SourceLine=67)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters_Variant0()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters("180", "-75000", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid weight, even if the other dat" +
            "a are valid (constructor with 2 parameters), Variant 1", SourceLine=68)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters_Variant1()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters("180", "1999", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid weight, even if the other dat" +
            "a are valid (constructor with 2 parameters), Variant 2", SourceLine=69)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters_Variant2()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataAreValidConstructorWith2Parameters("180", "700001", ((string[])(null)));
        }
        
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidDateEvenIfTheOtherDataIsValid(string validLength, string validWeight, string invalidDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new measurement cannot be created with an invalid date, even if the other data " +
                    "is valid", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.When(string.Format("I want to make a new measurement with valid length {0},  valid weight {1} and inv" +
                        "alid date {2}", validLength, validWeight, invalidDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new measurement cannot be created with an invalid date, even if the other data " +
            "is valid, 180", SourceLine=76)]
        public virtual void ANewMeasurementCannotBeCreatedWithAnInvalidDateEvenIfTheOtherDataIsValid_180()
        {
            this.ANewMeasurementCannotBeCreatedWithAnInvalidDateEvenIfTheOtherDataIsValid("180", "75000", "10-10-3016", ((string[])(null)));
        }
        
        public virtual void MeasurementCanReceiveANewLength(string validLength, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement can receive a new length", exampleTags);
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
    testRunner.When(string.Format("I change the length to {0} which is {1}", validLength, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
    testRunner.Then(string.Format("the length is {0}", validLength), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new length, 180", SourceLine=84)]
        public virtual void MeasurementCanReceiveANewLength_180()
        {
            this.MeasurementCanReceiveANewLength("180", "a normal length", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new length, 160", SourceLine=85)]
        public virtual void MeasurementCanReceiveANewLength_160()
        {
            this.MeasurementCanReceiveANewLength("160", "another normal length", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new length, 50", SourceLine=86)]
        public virtual void MeasurementCanReceiveANewLength_50()
        {
            this.MeasurementCanReceiveANewLength("50", "the minimum length", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new length, 300", SourceLine=87)]
        public virtual void MeasurementCanReceiveANewLength_300()
        {
            this.MeasurementCanReceiveANewLength("300", "the maximum length", ((string[])(null)));
        }
        
        public virtual void MeasurementCannotReceiveAnInvalidLength(string invalidLength, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement cannot receive an invalid length", exampleTags);
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
    testRunner.When(string.Format("I change the length to {0} which is {1}", invalidLength, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid length, -180", SourceLine=95)]
        public virtual void MeasurementCannotReceiveAnInvalidLength_180()
        {
            this.MeasurementCannotReceiveAnInvalidLength("-180", "a negative length", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid length, 49", SourceLine=96)]
        public virtual void MeasurementCannotReceiveAnInvalidLength_49()
        {
            this.MeasurementCannotReceiveAnInvalidLength("49", "a just too small length", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid length, 301", SourceLine=97)]
        public virtual void MeasurementCannotReceiveAnInvalidLength_301()
        {
            this.MeasurementCannotReceiveAnInvalidLength("301", "a just too big length", ((string[])(null)));
        }
        
        public virtual void MeasurementCanReceiveANewWeight(string validWeight, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement can receive a new weight", exampleTags);
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
    testRunner.When(string.Format("I change the weight to {0} which is {1}", validWeight, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
    testRunner.Then(string.Format("the weight is {0}", validWeight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new weight, 75000", SourceLine=105)]
        public virtual void MeasurementCanReceiveANewWeight_75000()
        {
            this.MeasurementCanReceiveANewWeight("75000", "a normal weight", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new weight, 65000", SourceLine=106)]
        public virtual void MeasurementCanReceiveANewWeight_65000()
        {
            this.MeasurementCanReceiveANewWeight("65000", "another normal weight", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new weight, 20000", SourceLine=107)]
        public virtual void MeasurementCanReceiveANewWeight_20000()
        {
            this.MeasurementCanReceiveANewWeight("20000", "the minimum weight", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new weight, 700000", SourceLine=108)]
        public virtual void MeasurementCanReceiveANewWeight_700000()
        {
            this.MeasurementCanReceiveANewWeight("700000", "the maximum weight", ((string[])(null)));
        }
        
        public virtual void MeasurementCannotReceiveAnInvalidWeight(string invalidWeight, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement cannot receive an invalid weight", exampleTags);
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
    testRunner.When(string.Format("I change the weight to {0} which is {1}", invalidWeight, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid weight, -75000", SourceLine=116)]
        public virtual void MeasurementCannotReceiveAnInvalidWeight_75000()
        {
            this.MeasurementCannotReceiveAnInvalidWeight("-75000", "a negative  weight", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid weight, 1999", SourceLine=117)]
        public virtual void MeasurementCannotReceiveAnInvalidWeight_1999()
        {
            this.MeasurementCannotReceiveAnInvalidWeight("1999", "a just too small weight", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid weight, 700001", SourceLine=118)]
        public virtual void MeasurementCannotReceiveAnInvalidWeight_700001()
        {
            this.MeasurementCannotReceiveAnInvalidWeight("700001", "a just too big weight", ((string[])(null)));
        }
        
        public virtual void MeasurementCanReceiveANewDate(string validDate, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement can receive a new date", exampleTags);
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
    testRunner.When(string.Format("I change the date to {0} which is {1}", validDate, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
    testRunner.Then(string.Format("the date is {0}", validDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new date, 12-12-2012", SourceLine=126)]
        public virtual void MeasurementCanReceiveANewDate_12_12_2012()
        {
            this.MeasurementCanReceiveANewDate("12-12-2012", "a date in past", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement can receive a new date, 10-10-2012", SourceLine=127)]
        public virtual void MeasurementCanReceiveANewDate_10_10_2012()
        {
            this.MeasurementCanReceiveANewDate("10-10-2012", "another date in past", ((string[])(null)));
        }
        
        public virtual void MeasurementCannotReceiveAnInvalidDate(string invalidDate, string remark, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Measurement cannot receive an invalid date", exampleTags);
#line 130
this.ScenarioSetup(scenarioInfo);
#line 131
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 132
    testRunner.When(string.Format("I change the date to {0} which is {1}", invalidDate, remark), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
    testRunner.Then("an exception is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Measurement cannot receive an invalid date, 10-10-3016", SourceLine=135)]
        public virtual void MeasurementCannotReceiveAnInvalidDate_10_10_3016()
        {
            this.MeasurementCannotReceiveAnInvalidDate("10-10-3016", "a date in future", ((string[])(null)));
        }
        
        public virtual void BmiIsCalculatedRoundedTo2Decimals(string length, string weight, string bmi, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bmi is calculated, rounded to 2 decimals", exampleTags);
#line 139
this.ScenarioSetup(scenarioInfo);
#line 140
    testRunner.Given("an existing measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
    testRunner.When(string.Format("the length is {0} and the weight is {1}", length, weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
    testRunner.Then(string.Format("the bmi is {0}", bmi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bmi is calculated, rounded to 2 decimals, Variant 0", SourceLine=144)]
        public virtual void BmiIsCalculatedRoundedTo2Decimals_Variant0()
        {
            this.BmiIsCalculatedRoundedTo2Decimals("160", "65000", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bmi is calculated, rounded to 2 decimals, Variant 1", SourceLine=145)]
        public virtual void BmiIsCalculatedRoundedTo2Decimals_Variant1()
        {
            this.BmiIsCalculatedRoundedTo2Decimals("160", "65001", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bmi is calculated, rounded to 2 decimals, Variant 2", SourceLine=146)]
        public virtual void BmiIsCalculatedRoundedTo2Decimals_Variant2()
        {
            this.BmiIsCalculatedRoundedTo2Decimals("160", "65009", "25.39", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bmi is calculated, rounded to 2 decimals, Variant 3", SourceLine=147)]
        public virtual void BmiIsCalculatedRoundedTo2Decimals_Variant3()
        {
            this.BmiIsCalculatedRoundedTo2Decimals("180", "75000", "23.15", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Two measurements are equal to each other if the date is equal, even if the length" +
            "s or weights differ", SourceLine=150)]
        public virtual void TwoMeasurementsAreEqualToEachOtherIfTheDateIsEqualEvenIfTheLengthsOrWeightsDiffer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two measurements are equal to each other if the date is equal, even if the length" +
                    "s or weights differ", ((string[])(null)));
#line 151
this.ScenarioSetup(scenarioInfo);
#line 152
    testRunner.Given("an existing measurement with length 180, weight 75000 and date \"12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 153
    testRunner.And("another existing measurement with another length 170, another weight 55000 and th" +
                    "e same date \"12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
    testRunner.When("I check if these measurements are equal to each other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
    testRunner.Then("true is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Two measurements are not equal to each other if the date is different, even if th" +
            "e lengths or weights are equal", SourceLine=156)]
        public virtual void TwoMeasurementsAreNotEqualToEachOtherIfTheDateIsDifferentEvenIfTheLengthsOrWeightsAreEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two measurements are not equal to each other if the date is different, even if th" +
                    "e lengths or weights are equal", ((string[])(null)));
#line 157
this.ScenarioSetup(scenarioInfo);
#line 158
    testRunner.Given("an existing measurement with length 180, weight 75000 and date \"12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 159
    testRunner.And("another existing measurement with the same length 180, the same weight 75000 and " +
                    "another date \"10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
    testRunner.When("I check if these measurements are equal to each other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
    testRunner.Then("false is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("One measurement is greater than another measurement if the date of the first meas" +
            "urement is more recent", SourceLine=162)]
        public virtual void OneMeasurementIsGreaterThanAnotherMeasurementIfTheDateOfTheFirstMeasurementIsMoreRecent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One measurement is greater than another measurement if the date of the first meas" +
                    "urement is more recent", ((string[])(null)));
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
    testRunner.Given("an existing measurement with date \"12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 165
    testRunner.And("another existing measurement with date \"10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
    testRunner.When("I compare the measurement with date \"12-12-2012\" with the measurement with date \"" +
                    "10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
    testRunner.Then("a positive number is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("One measurement is smaller than another measurement if the date of the first meas" +
            "urement is older", SourceLine=168)]
        public virtual void OneMeasurementIsSmallerThanAnotherMeasurementIfTheDateOfTheFirstMeasurementIsOlder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One measurement is smaller than another measurement if the date of the first meas" +
                    "urement is older", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
    testRunner.Given("an existing measurement with date \"10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
    testRunner.And("another existing measurement with date \"12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
    testRunner.When("I compare the measurement with date \"10-10-2012\" with the measurement with date \"" +
                    "12-12-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
    testRunner.Then("a negative number is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("One measurement is equal than another measurement if the dates of both measuremen" +
            "ts are the same", SourceLine=174)]
        public virtual void OneMeasurementIsEqualThanAnotherMeasurementIfTheDatesOfBothMeasurementsAreTheSame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One measurement is equal than another measurement if the dates of both measuremen" +
                    "ts are the same", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
    testRunner.Given("an existing measurement with date \"10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
    testRunner.And("another existing measurement with date \"10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
    testRunner.When("I compare the measurement with date \"10-10-2012\" with the measurement with date \"" +
                    "10-10-2012\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
    testRunner.Then("the number 0 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
