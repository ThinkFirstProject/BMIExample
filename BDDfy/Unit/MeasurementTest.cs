using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TestStack.BDDfy;
using BMI.Containers;

namespace Unit
{
    [TestClass]
    public class MeasurementTest
    {
        #region Variables
        private const int _LENGTH = 180;
        private const int _WEIGHT = 75000;
        private static readonly DateTime _DATE = new DateTime(2013, 10, 5);

        private Measurement _measurement;
        private Measurement _otherMeasurement;
        private Exception _ex;
        private Object _result;
        #endregion

        #region Properties
        public int LengthVal { get; set; }
        public int WeightVal { get; set; }
        public Double BMIVal { get; set; }
        public String DateVal { get; set; }
        public int ValidLength { get; set; }
        public int ValidWeight { get; set; }
        public String ValidDate { get; set; }
        public int InvalidLength { get; set; }
        public int InvalidWeight { get; set; }
        public String InvalidDate { get; set; }
        public String Remark { get; set; }
        #endregion

        #region Specs
        [TestMethod]
        public void ANewMeasurementCanBeCreatedWithALengthAWeightAndADate()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithLengthAndWeightAndDate(), "When I want to make a new measurement with length <LengthVal>, weight <WeightVal> and date <DateVal>")
                .Then(_ => _.aNewMeasurementIsCreated(), "Then a new measurement is created")
                .And(_ => _.theLengthIs(), "And the length is <LengthVal>")
                .And(_ => _.theWeightIs(), "And the weight is <WeightVal>")
                .And(_ => _.theDateIs(), "And the date is <DateVal>")
                .WithExamples(@"
                | LengthVal | WeightVal | DateVal      |
	            | 180       | 75000     | 12-12-2012   |
	            | 160       | 75000     | 12-12-2012   |
	            | 50        | 75000     | 12-12-2012   |
	            | 300       | 75000     | 12-12-2012   |
	            | 180       | 65000     | 12-12-2012   |
	            | 180       | 20000     | 12-12-2012   |
	            | 180       | 700000    | 12-12-2012   |
	            | 180       | 75000     | 10-10-2012   |
                ")
                .BDDfy("A new measurement can be created with a length, a weight and a date");
        }
        
        [TestMethod]
        public void ANewMeasurementCanBeCreatedWithALengthAWeightDateIsAutogenerated()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithLengthAndWeight(), "When I want to make a new measurement with length <LengthVal>, weight <WeightVal>")
                .Then(_ => _.aNewMeasurementIsCreated(), "Then a new measurement is created")
                .And(_ => _.theLengthIs(), "And the length is <LengthVal>")
                .And(_ => _.theWeightIs(), "And the weight is <WeightVal>")
                .And(_ => _.theDateIs(), "And the date is the current date")
                .WithExamples(@"
                | LengthVal | WeightVal |
	            | 180       | 75000     |
	            | 160       | 75000     |
	            | 50        | 75000     |
	            | 300       | 75000     |
	            | 180       | 65000     |
	            | 180       | 20000     |
	            | 180       | 700000    |
                ")
                .BDDfy("A new measurement can be created with a length, a weight. Date is autogenerated");
        }

        [TestMethod]
        public void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidconstructorWith3Parameters()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithInvalidLengthAndValidWeightAndValidDate(), "When I want to make a new measurement with invalid length <InvalidLength>, valid weight <ValidWeight> and valid date <ValidDate>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                | InvalidLength | ValidWeight | ValidDate  |
	            | -180          | 75000       | 12-12-2012 |
	            | 49            | 75000       | 12-12-2012 |
	            | 301           | 75000       | 12-12-2012 |")
                .BDDfy("A new measurement cannot be created with an invalid length, even if the other data is valid (constructor with 3 parameters)");
        }

        [TestMethod]
        public void ANewMeasurementCannotBeCreatedWithAnInvalidLengthEvenIfTheOtherDataIsValidconstructorWith2Parameters()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithInvalidLengthAndValidWeight(), "When I want to make a new measurement with invalid length <InvalidLength>, valid weight <ValidWeight>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                | InvalidLength | ValidWeight |
	            | -180          | 75000       |
	            | 49            | 75000       |
	            | 301           | 75000       |")
                .BDDfy("A new measurement cannot be created with an invalid length, even if the other data is valid (constructor with 3 parameters)");
        }

        [TestMethod]
        public void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataIsValidconstructorWith3Parameters()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithValidLengthAndInvalidWeightAndValidDate(), "When I want to make a new measurement with valid length <ValidLength>,  invalid weight <InvalidWeight> and valid date <ValidDate>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                | ValidLength | InvalidWeight | ValidDate  |
	            | 180         | -75000        | 12-12-2012 |
	            | 180         | 1999          | 12-12-2012 |
	            | 180         | 700001        | 12-12-2012 |")
                .BDDfy("A new measurement cannot be created with an invalid weight, even if the other data is valid (constructor with 3 parameters)");
        }

        [TestMethod]
        public void ANewMeasurementCannotBeCreatedWithAnInvalidWeightEvenIfTheOtherDataIsValidconstructorWith2Parameters()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithValidLengthAndInvalidWeight(), "When I want to make a new measurement with valid length <ValidLength>, invalid weight <InvalidWeight>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                | ValidLength | InvalidWeight |
	            | 180         | -75000        |
	            | 180         | 1999          |
	            | 180         | 700001        |")
                .BDDfy("A new measurement cannot be created with an invalid weight, even if the other data is valid (constructor with 2 parameters)");
        }

        [TestMethod]
        public void ANewMeasurementCannotBeCreatedWithAnInvalidDateEvenIfTheOtherDataIsValid()
        {
            this.When(_ => _.IWantToMakeANewMeasurementWithValidLengthAndValidWeightAndInValidDate(), "I want to make a new measurement with valid length <ValidLength>,  valid weight <ValidWeight> and invalid date <InvalidDate>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                | ValidLength | ValidWeight | InvalidDate |
	            | 180         | 75000       | 10-10-3016  |")
                .BDDfy("A new measurement cannot be created with an invalid weight, even if the other data is valid (constructor with 3 parameters)");
        }

        [TestMethod]
        public void MeasurementCanReceiveANewLength()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheLengthToValidLengthWhichIsRemark(), "When I change the length to <ValidLength> which is <Remark>")
                .Then(_ => _.theLengthIs(), "Then the length is <ValidLength>")
                .WithExamples(@"
                    | ValidLength | Remark                |
                    | 180         | a normal length       |
                    | 160         | another normal length |
                    | 50          | the minimum length    |
                    | 300         | the maximum length    |")
                .BDDfy("Measurement can receive a new length");
        }
        
        [TestMethod]
        public void MeasurementCannotReceiveAnInvalidLength()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheLengthToInvalidLengthWhichIsRemark(), "When I change the length to <InvalidLength> which is <Remark>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                    | InvalidLength | Remark                  |
                    | -180          | a negative length       |
                    | 49            | a just too small length |
                    | 301           | a just too big length   |")
                .BDDfy("Measurement cannot receive an invalid length");
        }
        
        [TestMethod]
        public void MeasurementCanReceiveANewWeight()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheWeightToValidWeightWhichIsRemark(), "When I change the weight to <ValidWeight> which is <Remark>")
                .Then(_ => _.theWeightIs(), "Then the weight is <ValidWeight>")
                .WithExamples(@"
                    | ValidWeight | Remark                |
                    | 75000       | a normal weight       |
                    | 65000       | another normal weight |
                    | 20000       | the minimum weight    |
                    | 700000      | the maximum weight    |")
                .BDDfy("Measurement can receive a new weight");
        }

        [TestMethod]
        public void MeasurementCannotReceiveAnInvalidWeight()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheLengthToInvalidLengthWhichIsRemark(), "When I change the weight to <InvalidWeight> which is <Remark>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                    | InvalidWeight | Remark                  |
                    | -75000        | a negative  weight      |
                    | 1999          | a just too small weight |
                    | 700001        | a just too big weight   |")
                .BDDfy("Measurement cannot receive an invalid weight");
        }

        [TestMethod]
        public void MeasurementCanReceiveANewDate()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheDateToValidDateWhichIsRemark(), "When I change the date to <ValidDate> which is <Remark>")
                .Then(_ => _.theDateIs(), "Then the date is <ValidDate>")
                .WithExamples(@"
                    | ValidDate  | Remark               |
                    | 12-12-2012 | a date in past       |
                    | 10-10-2012 | another date in past |")
                .BDDfy("Measurement can receive a new date");
        }
        
        [TestMethod]
        public void MeasurementCannotReceiveAnInvalidDate()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.IChangeTheDateToInvalidDateWhichIsRemark(), "When I change the date to <InvalidDate> which is <Remark>")
                .Then(_ => _.anExceptionIsThrown(), "Then an exception is thrown")
                .WithExamples(@"
                    | InvalidDate | Remark           |
	                | 10-10-3016  | a date in future |")
                .BDDfy("Measurement can receive a new date");
        }

        [TestMethod]
        public void TwoMeasurementsAreEqualToEachOtherIfTheDateIsEqualEvenIfTheLengthsOrWeightsDiffer()
        {
            this.Given(_ => _.anExistingMeasurementWithLengthAndWeightAndDate(180, 75000, "12-12-2012"), "Given an existing measurement with length 180, weight 75000 and date 12-12-2012")
                .And(_ => _.anotherExistingMeasurementWithAnotherLengthAndWeightAndTheSameDate(170, 55000, "12-12-2012"), "And another existing measurement with another length 170, another weight 55000 and the same date 12-12-2012")
                .When(_ => _.ICheckIfTheseMeasurementsAreEqualToEachOther(),"When I check if these measurements are equal to each other")
                .Then(_ => _.TrueIsReturned(), "Then true is returned")
                .BDDfy();
        }
        
        [TestMethod]
        public void TwoMeasurementsAreNotEqualToEachOtherIfTheDateIsDifferentEvenIfTheLengthsOrWeightsAreEqual()
        {
            this.Given(_ => _.anExistingMeasurementWithLengthAndWeightAndDate(180, 75000, "12-12-2012"), "Given an existing measurement with length 180, weight 75000 and date 12-12-2012")
                .And(_ => _.anotherExistingMeasurementWithAnotherLengthAndWeightAndTheSameDate(180, 75000, "10-10-2012"), "And another existing measurement with another length 180, another weight 75000 and the same date 10-10-2012")
                .When(_ => _.ICheckIfTheseMeasurementsAreEqualToEachOther(),"When I check if these measurements are equal to each other")
                .Then(_ => _.FalseIsReturned(), "Then true is returned")
                .BDDfy();
        }

        [TestMethod]
        public void OneMeasurementIsgreaterThanAnotherMeasurementIfTheDateOfThefirstMeasurementIsMoreRecent()
        {
            this.Given(_ => _.anExistingMeasurementWithDate("12-12-2012"),"Given an existing measurement with date 12-12-2012")
                .And(_ => _.anotherExistingMeasurementWithDate("10-10-2012"),"And another existing measurement with date 10-10-2012")
                .When(_ => _.ICompareTheMeasurementWithDateWithTheMeasurementWithDate(),"When I compare the measurement with date 12-12-2012 with the measurement with date 10-10-2012")
                .Then(_ => _.aPositiveNumberIsReturned(), "Then a positive number is returned")
                .BDDfy("One measurement is greater than another measurement if the date of the first measurement is more recent");
        }
        
        [TestMethod]
        public void OneMeasurementIsSmallerThanAnotherMeasurementIfTheDateOfThefirstMeasurementIsOlder()
        {
            this.Given(_ => _.anExistingMeasurementWithDate("10-10-2012"), "Given an existing measurement with date 10-10-2012")
                .And(_ => _.anotherExistingMeasurementWithDate("12-12-2012"), "And another existing measurement with date 12-12-2012")
                .When(_ => _.ICompareTheMeasurementWithDateWithTheMeasurementWithDate(), "When I compare the measurement with date 10-10-2012 with the measurement with date 12-12-2012")
                .Then(_ => _.aNegativeNumberIsReturned(), "Then a negative number is returned")
                .BDDfy("One measurement is smaller than another measurement if the date of the first measurement is more recent");  
        }

        [TestMethod]
        public void OneMeasurementIsEqualThanAnotherMeasurementIfTheDatesOfBothMeasurementsAreTheSame()
        {
            this.Given(_ => _.anExistingMeasurementWithDate("10-10-2012"), "Given an existing measurement with date 10-10-2012")
                .And(_ => _.anotherExistingMeasurementWithDate("10-10-2012"), "And another existing measurement with date 10-10-2012")
                .When(_ => _.ICompareTheMeasurementWithDateWithTheMeasurementWithDate(), "When I compare the measurement with date 10-10-2012 with the measurement with date 10-10-2012")
                .Then(_ => _.theNumber0IsReturned(), "Then the number 0 is returned")
                .BDDfy("One measurement is equal than another measurement if the dates of both measurements are the same");  
        }

        [TestMethod]
        public void BmiIsCalculatedAndRoundedTo2Decimals()
        {
            this.Given(_ => _.anExistingMeasurement(), "Given an existing measurement")
                .When(_ => _.TheLengthIsAndTheWeight(), "When the length is <LengthVal> and the weight is <WeightVal>")
                .Then(_ => _.theBmiIs(), "Then the bmi is <BMIVal>")
                .WithExamples(@"
                | LengthVal | WeightVal | BMIVal    |
	            | 160       | 65000     | 25,39     |
	            | 160       | 65001     | 25,39     |
	            | 160       | 65009     | 25,39     |
	            | 180       | 75000     | 23,15     |
                ")
                .BDDfy("Bmi is calculated, rounded to 2 decimals");      
        }
        #endregion

        #region Steps
        private void theBmiIs()
        {
            Assert.AreEqual(BMIVal, _measurement.getBMI());
        }

        private void TheLengthIsAndTheWeight()
        {
            _measurement.length = LengthVal;
            _measurement.weight = WeightVal;
        }

        private void theDateIs()
        {
            DateTime mDate;

            if (DateVal == null)
            {
                mDate = DateTime.Now;
            }
            else
            {
                mDate = DateTime.Parse(DateVal);
            }

            Assert.AreEqual(mDate.Day, _measurement.date.Day);
            Assert.AreEqual(mDate.Month, _measurement.date.Month);
            Assert.AreEqual(mDate.Year, _measurement.date.Year);
        }

        private void theWeightIs()
        {
            Assert.AreEqual(WeightVal, _measurement.weight);
        }

        private void theLengthIs()
        {
            Assert.AreEqual(LengthVal, _measurement.length);
        }

        private void aNewMeasurementIsCreated()
        {
            Assert.IsNotNull(_measurement);
        }

        private void IWantToMakeANewMeasurementWithLengthAndWeight()
        {
            try
            {
                _measurement = new Measurement(LengthVal, WeightVal);
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IWantToMakeANewMeasurementWithLengthAndWeightAndDate()
        {
            try
            {
                _measurement = new Measurement(LengthVal, WeightVal, DateTime.Parse(DateVal));
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void anExceptionIsThrown()
        {
            Assert.IsNotNull(_ex);
        }

        private void IWantToMakeANewMeasurementWithInvalidLengthAndValidWeightAndValidDate()
        {
            try
            {
                _measurement = new Measurement(InvalidLength, ValidWeight, DateTime.Parse(ValidDate));
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IWantToMakeANewMeasurementWithInvalidLengthAndValidWeight()
        {
            try
            {
                _measurement = new Measurement(InvalidLength, ValidWeight);
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IWantToMakeANewMeasurementWithValidLengthAndInvalidWeightAndValidDate()
        {
            try
            {
                _measurement = new Measurement(ValidLength, InvalidWeight, DateTime.Parse(ValidDate));
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IWantToMakeANewMeasurementWithValidLengthAndInvalidWeight()
        {
            try
            {
                _measurement = new Measurement(ValidLength, InvalidWeight);
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IWantToMakeANewMeasurementWithValidLengthAndValidWeightAndInValidDate()
        {
            try
            {
                _measurement = new Measurement(ValidLength, ValidWeight, DateTime.Parse(InvalidDate));
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }
        
        private void IChangeTheLengthToValidLengthWhichIsRemark()
        {
            try
            {
                LengthVal = ValidLength;
                _measurement.length = ValidLength;
            }
            catch (Exception ex)
            {

                _ex = ex;
            }
        }

        private void anExistingMeasurement()
        {
            _measurement = new Measurement(_LENGTH, _WEIGHT, _DATE);
        }

        private void IChangeTheLengthToInvalidLengthWhichIsRemark()
        {
            try
            {
                _measurement.length = InvalidLength;
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IChangeTheWeightToValidWeightWhichIsRemark()
        {
            try
            {
                WeightVal = ValidWeight;
                _measurement.weight = ValidWeight;
            }
            catch (Exception ex)
            {
                _ex = ex;
            }
        }

        private void IChangeTheDateToInvalidDateWhichIsRemark()
        {
            try
            {
                _measurement.date = DateTime.Parse(InvalidDate);
            }
            catch (Exception ex)
            {

                _ex = ex;
            }
        }

        private void IChangeTheDateToValidDateWhichIsRemark()
        {
            try
            {
                DateVal = ValidDate;
                _measurement.date = DateTime.Parse(ValidDate);
            }
            catch (Exception ex)
            {

                _ex = ex;
            }
        }

        private void TrueIsReturned()
        {
            Assert.IsTrue((Boolean)_result);
        }

        private void ICheckIfTheseMeasurementsAreEqualToEachOther()
        {
            _result = _measurement.@equals(_otherMeasurement);
        }

        private void anotherExistingMeasurementWithAnotherLengthAndWeightAndTheSameDate(int length, int weight, String date)
        {
            _otherMeasurement = new Measurement(length, weight, DateTime.Parse(date));
        }

        private void anExistingMeasurementWithLengthAndWeightAndDate(int length, int weight, String date)
        {
            _measurement = new Measurement(length, weight, DateTime.Parse(date));
        }
        
        private void FalseIsReturned()
        {
            Assert.IsFalse((Boolean)_result);
        }

        private void aPositiveNumberIsReturned()
        {
            Assert.IsTrue((int)_result > 0);
        }

        private void ICompareTheMeasurementWithDateWithTheMeasurementWithDate()
        {
            _result = _measurement.CompareTo(_otherMeasurement);
        }

        private void anotherExistingMeasurementWithDate(string date)
        {
            _otherMeasurement = new Measurement(_LENGTH, _WEIGHT, DateTime.Parse(date));
        }

        private void anExistingMeasurementWithDate(string date)
        {
            _measurement = new Measurement(_LENGTH, _WEIGHT, DateTime.Parse(date));
        }

        private void aNegativeNumberIsReturned()
        {
            Assert.IsTrue((int)_result < 0);
        }

        private void theNumber0IsReturned()
        {
            Assert.IsTrue((int)_result == 0);
        }
        #endregion
    }
}
